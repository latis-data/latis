# LaTiS properties
# These can be overridden with Java system properties.

#---- Log File Settings --------------------------------------------------------

# Define log directory and file name.
# This will be used by the File appender definition in the log configuration
# and by the "log" dataset.
# Comment these out to disable file logging.
log.dir = /var/log/latis
log.file = latis.log

#---- Server Settings ---------------------------------------------------------

# Allow cross-origin resource sharing (CORS).
# If defined, this will be used in the http response header:
# Access-Control-Allow-Origin
# Use * to allow requests from any other source.
cors.allow.origin = *

zip.hosts.allowed = lasp.colorado.edu

#---- Define Readers ----------------------------------------------------------

reader.catalog.class = latis.reader.CatalogReader
reader.cache.class = latis.reader.CacheAccessor
reader.memory.class = latis.reader.SystemReader

#---- Define Writers ----------------------------------------------------------

writer.asc.class = latis.writer.AsciiWriter
writer.asc.description = ASCII representation reflecting how the dataset is modeled

writer.txt.class = latis.writer.TextWriter
writer.txt.delimiter = , 
writer.txt.description = Comma delimited ASCII with no header

writer.tab.class = latis.writer.TextWriter
writer.tab.delimiter = \t
writer.tab.description = Tab delimited ASCII with no header

writer.bin.class = latis.writer.BinaryWriter
writer.bin.description = Binary stream in network byte order (big-endian)

writer.csv.class = latis.writer.CsvWriter
writer.csv.delimiter = ,
writer.csv.description = Comma delimited ASCII with simple header

writer.json.class = latis.writer.JsonWriter
writer.json.description = JSON with labels

writer.jsona.class = latis.writer.CompactJsonWriter
writer.jsona.description = JSON as arrays

writer.jsond.class = latis.writer.JsonMetadataAndDataWriter
writer.jsond.description = JSON with metadata and arrays of data

writer.dds.class = latis.writer.DdsWriter
writer.dds.description = DAP2 standard Dataset Descriptor Structure with structure metadata only

writer.das.class = latis.writer.DasWriter
writer.das.description = DAP2 standard Dataset Attribute Structure with metadata only

writer.dods.class = latis.writer.DodsWriter
writer.dods.description = DAP2 standard data output

writer.nc.class = latis.writer.NetcdfWriter
writer.nc.description = NetCDF file

writer.html.class = latis.writer.HtmlWriter
writer.html.description = HTML landing page for a dataset

writer.zip.class = latis.writer.ZipWriter2
writer.zip.description = Zip file, available only for file list datasets

#---- Define Operations -------------------------------------------------------

operation.first.class = latis.ops.filter.FirstFilter
operation.first.description = Return the first sample
operation.first.usage = first()

operation.last.class = latis.ops.filter.LastFilter
operation.last.description = Return the last sample
operation.last.usage = last()

operation.take.class = latis.ops.filter.TakeOperation
operation.take.description = Return the first n samples
operation.take.usage = take(n)
operation.limit.class = latis.ops.filter.TakeOperation

operation.takeRight.class  = latis.ops.filter.TakeRightOperation
operation.takeRight.description = Return the lattermost n samples
operation.takeRight.usage = takeRight(n)
operation.take_right.class = latis.ops.filter.TakeRightOperation

operation.drop.class = latis.ops.DropOperation
operation.drop.description = Return all but the first n samples
operation.drop.usage = drop(n)

operation.stride.class = latis.ops.filter.StrideFilter
operation.stride.description = Return every nth sample
operation.stride.usage = stride(n)

operation.project.class = latis.ops.Projection
operation.project.description = Return only the given variables, does not change order
operation.project.usage = project(v1,v2,...)

operation.select.class = latis.ops.filter.Selection
operation.select.description = Filter samples given a predicate (e.g. time>0)
operation.select.usage = select(predicate), e.g. select(time<2000-01-01)

operation.contains.class = latis.ops.filter.Contains
operation.contains.description = Return samples where the given variable has one of the given values
operation.contains.usage = contains(name, v1, v2, ...)

operation.rename.class = latis.ops.RenameOperation
operation.rename.description = Change the name of a given variable
operation.rename.usage = rename(old,new)

operation.convertTime.class = latis.ops.UnitConversion
operation.convertTime.description = Convert time values to the given units
operation.convertTime.usage = convertTime(time,units), where units is duration units since an epoch (e.g. milliseconds since 1970-01-01)
operation.convert.class = latis.ops.UnitConversion
operation.convert_time.class = latis.ops.UnitConversion

operation.formatTime.class = latis.ops.TimeFormatter
operation.formatTime.description = Convert time values to the given format (for text output) \
as specified by <a href="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html" target="_blank"> Java's SimpleDateFormat</a>
operation.formatTime.usage = formatTime(format), e.g. formatTime(yyyy-MM-dd'T'HH:mm:ss.SSS)
operation.format_time.class = latis.ops.TimeFormatter

operation.excludeMissing.class = latis.ops.filter.ExcludeMissing
operation.excludeMissing.description = Exclude all samples that contain a missing value
operation.excludeMissing.usage = excludeMissing()
operation.exclude_missing.class = latis.ops.filter.ExcludeMissing

operation.replaceMissing.class = latis.ops.ReplaceMissingOperation
operation.replaceMissing.description = Replace any missing value with the given value
operation.replaceMissing.usage = replaceMissing(value)
operation.replace_missing.class = latis.ops.ReplaceMissingOperation

operation.replaceValue.class = latis.ops.ReplaceValueOperation
operation.replaceValue.description = Replace every occurrence of a given value with another given value
operation.replaceValue.usage = replaceValue(v1,v2)

operation.roundWithSigfigs.class = latis.ops.RoundWithSigfigs
operation.roundWithSigfigs.description = Round values of the given variable to the given number of significant figures
operation.roundWithSigfigs.usage = roundWithSigfigs(name, value)

operation.roundWithPrecision.class = latis.ops.RoundWithPrecision
operation.roundWithPrecision.description = Round values of the given variable to the given number of decimal places
operation.roundWithPrecision.usage = roundWithPrecision(name, value)

operation.appendText.class = latis.ops.TextAppender
operation.appendText.description = Append the given text to the value of the given text variable
operation.appendText.usage = appendText(name,text)

operation.derive.class = latis.ops.MathExpressionDerivation
operation.derive.description = Derive a new variable in terms of other variables
operation.derive.usage = derive(expression), e.g. derive(a/b+1)

operation.max.class = latis.ops.filter.MaxFilter
operation.max.description = Return the samples that have the maximum value for a given variable
operation.max.usage = max(name)

operation.min.class = latis.ops.filter.MinFilter
operation.min.description = Return the samples that have the minimum value for a given variable
operation.min.usage = min(name)

operation.maxDelta.class = latis.ops.filter.MaxDeltaFilter
operation.maxDelta.description = Filter out samples where the change between samples for a given variable exceeds a given value
operation.maxDelta.usage = maxDelta(name,value)

operation.total.class = latis.ops.Total
operation.total.description = Sum the range values of all the samples into a single sample, using the last domain value
operation.total.usage = total()

operation.integrate.class = latis.ops.Integrate
operation.integrate.description = Integrate a nested function over an optional range of domain values
operation.integrate.usage = integrate(v1,v2)

operation.pivot.class = latis.ops.Pivot
operation.pivot.description = Transform a range of a single variable into a \
tuple where each element corresponds to one of n values of the given domain variable
operation.pivot.usage = pivot(name, n)

operation.binAverageByWidth.class = latis.ops.BinAverageByWidth
operation.binAverageByWidth.description = Bin the samples by a given width, with optional start value, \
in the units of the domain variable and compute the mean, min, max, and count of the range values in each bin
operation.binAverageByWidth.usage = binAverageByWidth(width, start)

operation.domBin.class = latis.ops.DomainBinner
operation.domBin.description = Add bin semantics to the domain variable by \
adding min and max variables to the range to specify the coverage of each bin
operation.domBin.usage = domBin(start|end,fill)

operation.convertTimeTupleToTime.class = latis.ops.TimeTupleToTime
operation.convertTimeTupleToTime.description = Transform Tuples of date-time components into Time scalars
operation.convertTimeTupleToTime.usage = convertTimeTupleToTime()

operation.takeMaxVersion.class = latis.ops.TakeMaxVersion
operation.takeMaxVersion.description = Group by time and for each time keep only the sample with the maximum version
operation.takeMaxVersion.usage = takeMaxVersion()

operation.validateUrls.class = latis.ops.UrlValidator
operation.urlToBinary.class = latis.ops.UrlToBinary
operation.toBase64.class = latis.ops.Base64Encoder
